{"version":3,"file":"react-image-upload-s3.cjs.production.min.js","sources":["../src/utils.ts","../src/ImageS3Upload.tsx","../node_modules/style-inject/dist/style-inject.es.js","../src/noimage.svg","../src/delete.svg"],"sourcesContent":["export const fetchUrlSign = async (signingUrl: string, fileName: string) => {\r\n    let myHeaders = new Headers();\r\n    myHeaders.append(\"Content-type\", \"application/json\");  \r\n    const bodyObject = {objectName: fileName};\r\n    \r\n    let res = await fetch(signingUrl, {\r\n        method: 'POST',\r\n        headers: myHeaders,\r\n        body: JSON.stringify(bodyObject)\r\n    });\r\n    \r\n    if (!res.ok) {\r\n        throw new Error(`${res.status} ${res.statusText}`);\r\n    }\r\n\r\n    const json = await res.json();\r\n    return JSON.parse(json);\r\n}","import React, { useState, useEffect, forwardRef, useRef, useImperativeHandle } from 'react';\r\nimport Resizer from \"react-image-file-resizer\";\r\nimport { fetchUrlSign } from \"./utils\";\r\nimport deleteImage from \"./delete.svg\";\r\nimport \"./style.css\";\r\nimport noImage from \"./noimage.svg\";\r\n\r\nexport interface ImageS3UploadProps {\r\n    signingUrl: string;\r\n    autoUpload: boolean;    \r\n    value?: string;\r\n    onChange?: (e: any) => void;    \r\n    emptyPhoto?: string; \r\n    serverPhoto?: string; \r\n    buttonCaption?: string;\r\n    showSize?: boolean;\r\n    id?: string;\r\n    name?: string;\r\n\r\n    resizer?: {\r\n        enabled: boolean;\r\n        autoResize: boolean; // otherwise resizing will be preform before uploading\r\n        maxWidth: number;\r\n        maxHeight: number;\r\n        compressFormat: string; // Can be either JPEG, PNG or WEBP\r\n        quality: number; // A number between 0 and 100. Used for the JPEG compression.\r\n        rotation: number; // Degree of clockwise rotation to apply to the image. Rotation is limited to multiples of 90 degrees.(if no rotation is needed, just set it to 0) (0, 90, 180, 270, 360)\r\n    };\r\n\r\n    onStart?: () => void;\r\n    onUploaded?: () => void;\r\n    onProgress?: (percent: number) => void;\r\n    onFinish?: (isSuccessful: boolean, urlImage: string) => void;\r\n    onError?: (msg: string) => void;\r\n    onSignedUrl?: (data: any)  => void;\r\n    onResizeStart?: () => void;\r\n    onResizeFinish?: () => void;\r\n}\r\n\r\ninterface RefObject {\r\n    uploadFile: () => Promise<boolean>\r\n}\r\n\r\nenum stateComponent {\r\n    none,    \r\n    resizing,\r\n    resized,\r\n    startingUpload,\r\n    uploading,\r\n    uploaded,\r\n    finish,\r\n    error\r\n}\r\n\r\nconst defaultResizingOptions = {\r\n    enabled: false,\r\n    autoResize: true, // otherwise resizing will be preform before uploading\r\n    maxWidth: 1280,\r\n    maxHeight: 1280,\r\n    compressFormat: \"JPEG\",\r\n    quality: 70,\r\n    rotation: 0\r\n}\r\n\r\nexport const ImageS3Upload = forwardRef<RefObject | undefined, ImageS3UploadProps>(({\r\n    signingUrl,\r\n    autoUpload,\r\n    emptyPhoto = noImage,\r\n    serverPhoto,\r\n    value,\r\n    onChange,\r\n    buttonCaption = 'Browse...',\r\n    showSize = true,\r\n    id = '',\r\n    name = '',\r\n    resizer = defaultResizingOptions,\r\n    onStart,\r\n    onUploaded,\r\n    onProgress,\r\n    onFinish,\r\n    onError,\r\n    onSignedUrl,\r\n    onResizeStart,\r\n    onResizeFinish\r\n}, ref) => {\r\n\r\n\r\n    const inputFileEl = useRef<HTMLInputElement>(null);\r\n    \r\n    const [status, setStatus] = useState<{state: stateComponent, msg: string, intValue?: number}>({state: stateComponent.none, msg: ''});\r\n    const [imagePhoto, setImagePhoto] = useState<string | undefined>(undefined);\r\n    const [compressedPhoto, setCompressedPhoto] = useState<Blob | undefined>(undefined);\r\n    const [buttonCaptionState, setButtonCaptionState] = useState(buttonCaption);\r\n    const [showSpinner, setShowSpinner] = useState<boolean>(false);    \r\n    const [s3DataState, setS3DataState] = useState<any>(undefined);\r\n    const [notLoad, setNotLoad] = useState(false); // to prevent loading photo from S3 when we have this photo in blob input element\r\n    const [filenameValue, setFilenameValue] = useState('');\r\n\r\n    // to be able to call method uploadFile\r\n    useImperativeHandle(ref, () => ({\r\n        uploadFile: async () => {             \r\n            if (status.state === stateComponent.finish || status.state === stateComponent.uploaded) {\r\n                setStatus({state: stateComponent.finish, msg: ''});\r\n                return true;\r\n            } \r\n              \r\n            //@ts-ignore\r\n            if (inputFileEl?.current?.files && inputFileEl.current.files.length === 1) {                \r\n                if (status.state !== stateComponent.resizing) {                    \r\n                    !autoUpload && onStart && onStart();\r\n                    \r\n                    //@ts-ignore\r\n                    const p = await startUpload(inputFileEl?.current?.files[0].name, inputFileEl?.current?.files[0] as Blob);                                       \r\n                    if (p) {\r\n                        return true;\r\n                    } else {\r\n                        return false;\r\n                    }\r\n                    \r\n                } \r\n                setStatus({state: stateComponent.error, msg: ''});               \r\n                return false;\r\n            }\r\n            setStatus({state: stateComponent.finish, msg: ''});\r\n            return true;                         \r\n        }\r\n    }));    \r\n\r\n    useEffect(()=>{\r\n        if (emptyPhoto) {\r\n            setImagePhoto(emptyPhoto);    \r\n        }  \r\n    }, []);\r\n\r\n    useEffect(()=>{        \r\n        if (s3DataState?.fields?.key) {\r\n            setNotLoad(true);            \r\n            fireOnChange(s3DataState.fields.key);\r\n        } \r\n    }, [s3DataState]);     \r\n    \r\n    useEffect(()=>{                  \r\n        if (status.state === stateComponent.none) {\r\n            setButtonCaptionState(buttonCaption); \r\n            setCompressedPhoto(undefined);\r\n        }  \r\n\r\n        if (status.state === stateComponent.resizing) {\r\n            setButtonCaptionState(\"Resizing...\");            \r\n        }   \r\n\r\n        if (status.state === stateComponent.resized) {\r\n            showSize ? setButtonCaptionState(`Resized (${status.msg})`) : setButtonCaptionState('Resized');            \r\n        }   \r\n\r\n        if (status.state === stateComponent.startingUpload) {\r\n            setButtonCaptionState(\"Starting... \");\r\n            setShowSpinner(true);\r\n        }                          \r\n          \r\n        if (status.state === stateComponent.uploading) {\r\n            setButtonCaptionState(status.msg);\r\n            if (onProgress && status?.intValue) {\r\n                onProgress(status.intValue);\r\n            }\r\n        }          \r\n            \r\n        if (status.state === stateComponent.uploaded) {\r\n            setButtonCaptionState('Done');\r\n            setShowSpinner(false); \r\n            if (onUploaded) onUploaded();   \r\n            if (onFinish) onFinish(true, filenameValue);\r\n        }\r\n\r\n        if (onFinish && status.state === stateComponent.finish) {\r\n             onFinish(true, filenameValue);\r\n        }  \r\n        \r\n        if (status.state === stateComponent.error) {\r\n            setButtonCaptionState(\"Error\");\r\n            setShowSpinner(false);\r\n            onError && onError(status.msg);\r\n            if (onFinish) onFinish(false, filenameValue);\r\n        }          \r\n        \r\n    }, [status]);\r\n\r\n\r\n    useEffect(()=>{                        \r\n        if (value) {\r\n            \r\n            if (serverPhoto == null) {\r\n                serverPhoto = '';    \r\n            }\r\n\r\n            if (serverPhoto.slice(-1) != '/' && value.slice(0, 1) != '/') { // if there is no symbol / between serverPhoto and value, just add it.\r\n                serverPhoto = serverPhoto + '/';\r\n            }\r\n\r\n            if (!notLoad) { // to prevent loading photo from S3 when we have this photo in blob input element\r\n                setButtonCaptionState(buttonCaption);\r\n                setShowSpinner(false);\r\n                if (inputFileEl?.current) {\r\n                    //@ts-ignore\r\n                    inputFileEl.current.value='';\r\n                }\r\n                                \r\n                setImagePhoto(`${serverPhoto}${value}`);\r\n            }\r\n                    \r\n          \r\n        } else {\r\n            setImagePhoto(emptyPhoto);\r\n            setButtonCaptionState(buttonCaption);\r\n        }\r\n               \r\n        setNotLoad(false);\r\n        value && setFilenameValue(value);\r\n        \r\n    }, [value]);   \r\n    \r\n    const fireOnChange = (value: string) => {\r\n        const event = {\r\n            persist: () => {},\r\n            target: {\r\n              type: \"change\",\r\n              id: id,\r\n              name: name,\r\n              value: value\r\n            }\r\n          };\r\n\r\n          setFilenameValue(value);\r\n          onChange && onChange(event);         \r\n    }\r\n\r\n    const resizeFile = (file: Blob): Promise<Blob> => \r\n\t\tnew Promise((resolve) => {\r\n\t\t\tResizer.imageFileResizer(\r\n\t\t\t\tfile,\r\n\t\t\t\tresizer.maxWidth,\r\n\t\t\t\tresizer.maxHeight,\r\n\t\t\t\tresizer.compressFormat,\r\n\t\t\t\tresizer.quality,\r\n\t\t\t\tresizer.rotation,\r\n\t\t\t\t(uri) => {\r\n\t\t\t\t\tif (uri instanceof Blob) resolve(uri);\r\n\t\t\t\t},\r\n\t\t\t\t\"blob\"\r\n\t\t\t);\r\n\t\t});\r\n\r\n    const onChangeFile = async (event: React.ChangeEvent<HTMLInputElement>) => {        \r\n        if (event.target.files && event.target.files.length > 0) {\r\n            autoUpload && onStart && onStart();\r\n            setStatus({state: stateComponent.none, msg: ''});\r\n            const file = event.target.files[0];            \r\n            setImagePhoto(URL.createObjectURL(file)); \r\n            \r\n            if (resizer.enabled && resizer.autoResize) {                                \r\n                try {                \r\n                    onResizeStart && onResizeStart();\r\n                    setStatus({state: stateComponent.resizing, msg: ''});                                        \r\n                    const image = await resizeFile(file);\r\n\r\n                    if (image instanceof Blob) {\r\n                        setCompressedPhoto(image);\r\n                        setStatus({state: stateComponent.resized, msg: String(humanFileSize(image.size))});                        \r\n    \r\n                        if (autoUpload) {\r\n                            startUpload(file.name, image);     \r\n                        }\r\n                    } else {\r\n                        setStatus({state: stateComponent.error, msg: 'Resizing error.'});                          \r\n                    }                     \r\n\r\n                } catch (error) {\r\n                    console.log('ERROR', error);\r\n                    let message\r\n                    if (error instanceof Error) message = error.message\r\n                    else message = String(error)\r\n                    setStatus({state: stateComponent.error, msg: message});                    \r\n                } finally {\r\n                    onResizeFinish && onResizeFinish();\r\n                }\r\n            } else {\r\n                if (autoUpload) {\r\n                    startUpload(file.name, file);     \r\n                }                \r\n            }            \r\n\r\n        }                \r\n    };\r\n\r\n\t// const fetchUrlSign = async (fileName: string) => {\t\t\t\r\n\t// \tlet myHeaders = new Headers();\r\n\t// \tmyHeaders.append(\"Content-type\", \"application/json\");  \r\n    //     const bodyObject = {objectName: fileName};\r\n        \r\n    //     let res = await fetch(signingUrl, {\r\n    //         method: 'POST',\r\n    //         headers: myHeaders,\r\n    //         body: JSON.stringify(bodyObject)\r\n    //     });\r\n        \r\n    //     if (!res.ok) {\r\n    //         throw new Error(`${res.status} ${res.statusText}`);\r\n    //     }\r\n\r\n    //     const json = await res.json();\r\n    //     return JSON.parse(json);\t\t\r\n\t// }\r\n\r\n    const updateProgress = (ev: ProgressEvent<EventTarget>) => {        \r\n        if (ev.lengthComputable) {\r\n            let percentComplete = Math.round((ev.loaded / ev.total) * 100);            \r\n            setStatus({state: stateComponent.uploading, msg: String(percentComplete)+'%', intValue: percentComplete})\r\n        }\r\n    } \r\n\r\n    const uploadFile = (file: Blob, s3Data: any) => {\r\n        return new Promise((resolve, reject) => {\r\n            let xhr = new XMLHttpRequest();\r\n            xhr.open(\"POST\", s3Data.url);\r\n            xhr.timeout = 30000;\r\n            xhr.upload.onprogress = updateProgress;\r\n    \r\n            let postData = new FormData();\r\n            for (let key in s3Data.fields) {\t\t\t\r\n                if (key != 'file') { // in field \"file\" must be blob of file.\r\n                    postData.append(key, s3Data.fields[key]);\r\n                    //console.log('append', key, s3Data.fields[key]);\r\n                }                    \r\n            }\r\n            postData.append(\"file\", file);\r\n    \r\n            xhr.onload = () => {\r\n                // transaction completes successfully.\r\n                setStatus({state: stateComponent.uploaded, msg: ''});\r\n                resolve(xhr.status);\r\n            };  \r\n    \r\n            xhr.onerror = (e: any) => {\r\n                reject('error');\r\n                setShowSpinner(false);\r\n                setButtonCaptionState('Error');                        \r\n                setStatus({state: stateComponent.error, msg: String(e.target.status)});                                                                            \r\n                alert(`Error during file upload (status: ${e.target.statusText})`);\r\n            };  \r\n    \r\n            xhr.ontimeout = () => {\r\n                reject('timeout');\r\n                setShowSpinner(false);\r\n                setButtonCaptionState('Error');                        \r\n                setStatus({state: stateComponent.error, msg: 'Time out'});                                                                            \r\n                alert(`Error during file upload (status: Time out)`);   \r\n            }\r\n                      \r\n            xhr.send(postData);\r\n        });\r\n    }\r\n\r\n\r\n\r\n    const resizerFunc = async (file: Blob): Promise<Blob | undefined> => {\r\n        if (resizer.enabled && resizer.autoResize) {\r\n                        \r\n            if (compressedPhoto) { // if autoUpload = False, it's mean that resized photo in state\r\n                return compressedPhoto;\r\n            }\r\n\r\n            if (file) { // if autoUpload = True, it's mean that resized photo gona be in 'file' parametr\r\n                return file;                      \r\n            }                    \r\n\r\n            setStatus({state: stateComponent.error, msg: ''});\r\n            return undefined;                \r\n        }\r\n\r\n        if (resizer.enabled && !resizer.autoResize) {\r\n            try {                \r\n                onResizeStart && onResizeStart();\r\n                setStatus({state: stateComponent.resizing, msg: ''});                            \r\n                const image = await resizeFile(file);\r\n\r\n                if (image instanceof Blob) {                            \r\n                    setStatus({state: stateComponent.resized, msg: String(humanFileSize(image.size))});  \r\n                    return image                          \r\n                } else {\r\n                    setStatus({state: stateComponent.error, msg: 'Resizing error.'});\r\n                    return undefined;\r\n                }\r\n                          \r\n            } finally {\r\n                onResizeFinish && onResizeFinish();                    \r\n            } \r\n                            \r\n        }\r\n\r\n        if (!resizer.enabled) {\r\n            return file; \r\n        }\r\n\r\n        return undefined;\r\n    }\r\n\r\n\r\n    const startUpload = async (filename: string, file: Blob) => {        \r\n        try {\r\n            filename = filename.replace(/\\s/g, ''); // remove spaces, because there is some problem with restAPI, which return url filename with %20 instead space, after that when we savind data again, %20 will be convert to %2520 (% = %25)\r\n\r\n            setStatus({state: stateComponent.startingUpload, msg: ''});\r\n            setS3DataState(undefined);\r\n\r\n            const signedUrl = await fetchUrlSign(signingUrl, filename);            \r\n            setS3DataState(signedUrl);  \r\n            if (onSignedUrl) {\r\n                onSignedUrl(signedUrl);\r\n            }\r\n\r\n            const fileForUpload = await resizerFunc(file);\r\n            if (fileForUpload) {\r\n                await uploadFile(fileForUpload, signedUrl);  \r\n                return true; \r\n            }\r\n\r\n            return false;\r\n\r\n        } catch(error) {            \r\n            let message;\r\n            if (error instanceof Error) message = error.message;\r\n            else message = String(error);            \r\n            setStatus({state: stateComponent.error, msg: message});\r\n            return false;           \r\n        }\r\n\r\n    }\r\n\r\n    const clearImage = () => {        \r\n        fireOnChange('');\r\n        setImagePhoto(emptyPhoto);        \r\n        setStatus({state: stateComponent.none, msg: ''});\r\n        if (inputFileEl?.current) {\r\n            //@ts-ignore\r\n            inputFileEl.current.value='';\r\n        }         \r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"imageS3UploadContainer\" style={{position: \"relative\"}}>\r\n\r\n            <img id=\"imageS3Upload\" src={imagePhoto} key={imagePhoto} alt=\"\" />\r\n            \r\n            <img style={{cursor: \"pointer\"}}\r\n                id=\"imageDeleteIconS3Upload\"\r\n                src={deleteImage} \r\n                onClick={clearImage}                          \r\n                alt=\"\" \r\n            />\r\n                                        \r\n            {showSpinner && <span className=\"spinner\"></span>} \r\n\r\n            <button \r\n                className=\"button\" \r\n                type=\"button\"\r\n                onClick={()=>{                        \r\n                    setShowSpinner(false);\r\n                    setButtonCaptionState(buttonCaption);\r\n                    //@ts-ignore                        \r\n                    inputFileEl.current.click();\r\n                }}\r\n                data-testid='browseButton'\r\n            >\r\n                {buttonCaptionState}\r\n                \r\n            </button>{' '}\r\n                                    \r\n            <input ref={inputFileEl} type=\"file\" accept=\"image/*\" style={{display: \"none\"}} onChange={onChangeFile} data-testid='inputFile'/>                    \r\n        </div>\r\n    );\r\n\r\n})\r\n\r\nfunction humanFileSize(size: number) {\r\n    const i = Math.floor( Math.log(size) / Math.log(1024) );\r\n    const sSize = ( size / Math.pow(1024, i) ).toFixed(0);\r\n    return `${sSize} ${['B', 'kB', 'MB', 'GB', 'TB'][i]}`;        \r\n};","function styleInject(css, ref) {\n  if ( ref === void 0 ) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') { return; }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nexport default styleInject;\n","var img = \"data:image/svg+xml,%3csvg width='24px' height='24px' viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg'%3e%3cpath fill='rgb(220%2c220%2c220)' d='M4 5h13v7h2V5c0-1.103-.897-2-2-2H4c-1.103 0-2 .897-2 2v12c0 1.103.897 2 2 2h8v-2H4V5z'/%3e%3cpath fill='rgb(220%2c220%2c220)' d='m8 11-3 4h11l-4-6-3 4z'/%3e%3cpath fill='rgb(220%2c220%2c220)' d='M19 14h-2v3h-3v2h3v3h2v-3h3v-2h-3z'/%3e%3c/svg%3e\";\n  export default img;","var img = \"data:image/svg+xml,%3c%3fxml version='1.0' encoding='utf-8'%3f%3e%3c!-- Generator: Adobe Illustrator 13.0.0%2c SVG Export Plug-In . SVG Version: 6.00 Build 14948) --%3e%3c!DOCTYPE svg PUBLIC '-//W3C//DTD SVG 1.1//EN' 'http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd' %5b %3c!ENTITY st0 'fill:%23F44336%3b'%3e %3c!ENTITY st1 'fill:white%3b'%3e%5d%3e%3csvg version='1.1' id='Ebene_1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' x='0px' y='0px' width='595.275px' height='841.891px' viewBox='0 0 595.275 841.891' style='enable-background:new 0 0 595.275 841.891%3b' xml:space='preserve'%3e%3cg%3e %3cpath style='%26st1%3b' d='M326.039%2c513.568h-69.557v-9.441c0-10.531%2c2.12-19.876%2c6.358-28.034 c4.239-8.156%2c13.165-18.527%2c26.783-31.117l12.33-11.176c7.322-6.678%2c12.684-12.973%2c16.09-18.882 c3.4-5.907%2c5.105-11.817%2c5.105-17.727c0-8.99-3.084-16.022-9.248-21.098c-6.166-5.073-14.773-7.611-25.819-7.611 c-10.405%2c0-21.646%2c2.152-33.719%2c6.455c-12.075%2c4.305-24.663%2c10.693-37.765%2c19.171v-60.5c15.541-5.395%2c29.735-9.375%2c42.582-11.946 c12.843-2.568%2c25.241-3.854%2c37.186-3.854c31.342%2c0%2c55.232%2c6.392%2c71.678%2c19.171c16.439%2c12.783%2c24.662%2c31.439%2c24.662%2c55.973 c0%2c12.591-2.506%2c23.862-7.516%2c33.815c-5.008%2c9.956-13.553%2c20.649-25.625%2c32.08l-12.332%2c10.983 c-8.736%2c7.966-14.451%2c14.354-17.148%2c19.171s-4.045%2c10.115-4.045%2c15.896V513.568z M256.482%2c542.085h69.557v68.593h-69.557V542.085z' /%3e%3c/g%3e%3ccircle style='%26st0%3b' cx='299.76' cy='439.067' r='218.516'/%3e%3cg%3e %3crect x='267.162' y='307.978' transform='matrix(0.7071 -0.7071 0.7071 0.7071 -222.6202 340.6915)' style='%26st1%3b' width='65.545' height='262.18'/%3e %3crect x='266.988' y='308.153' transform='matrix(0.7071 0.7071 -0.7071 0.7071 398.3889 -83.3116)' style='%26st1%3b' width='65.544' height='262.179'/%3e%3c/g%3e%3c/svg%3e\";\n  export default img;"],"names":["stateComponent","fetchUrlSign","signingUrl","fileName","myHeaders","Headers","append","bodyObject","objectName","_context","fetch","method","headers","body","JSON","stringify","res","ok","Error","status","statusText","json","parse","css","ref","insertAt","document","head","getElementsByTagName","style","createElement","type","firstChild","insertBefore","appendChild","styleSheet","cssText","createTextNode","defaultResizingOptions","enabled","autoResize","maxWidth","maxHeight","compressFormat","quality","rotation","humanFileSize","size","i","Math","floor","log","pow","toFixed","forwardRef","autoUpload","_ref$emptyPhoto","emptyPhoto","serverPhoto","value","onChange","_ref$buttonCaption","buttonCaption","_ref$showSize","showSize","_ref$id","id","_ref$name","name","_ref$resizer","resizer","onStart","onUploaded","onProgress","onFinish","onError","onSignedUrl","onResizeStart","onResizeFinish","inputFileEl","useRef","useState","state","none","msg","setStatus","undefined","imagePhoto","setImagePhoto","compressedPhoto","setCompressedPhoto","buttonCaptionState","setButtonCaptionState","showSpinner","setShowSpinner","s3DataState","setS3DataState","notLoad","setNotLoad","filenameValue","setFilenameValue","useImperativeHandle","uploadFile","finish","uploaded","current","_inputFileEl$current","files","length","resizing","startUpload","_inputFileEl$current2","_inputFileEl$current3","error","useEffect","fields","_s3DataState$fields","key","fireOnChange","resized","startingUpload","uploading","intValue","slice","event","persist","target","resizeFile","file","Promise","resolve","Resizer","imageFileResizer","uri","Blob","onChangeFile","_context2","URL","createObjectURL","image","String","console","message","updateProgress","ev","lengthComputable","percentComplete","round","loaded","total","s3Data","reject","xhr","XMLHttpRequest","open","url","timeout","upload","onprogress","postData","FormData","onload","onerror","e","alert","ontimeout","send","resizerFunc","_context3","filename","_context4","replace","signedUrl","fileForUpload","React","className","position","src","alt","cursor","onClick","click","accept","display"],"mappings":"s9NAAO,IC2CFA,ED3CQC,aAAY,kBAAG,WAAOC,EAAoBC,GAAgB,UAAA,6BAAA,OAAA,sBAAA,OAG1B,OAFrCC,EAAY,IAAIC,SACVC,OAAO,eAAgB,oBAC3BC,EAAa,CAACC,WAAYL,GAASM,SAEzBC,MAAMR,EAAY,CAC9BS,OAAQ,OACRC,QAASR,EACTS,KAAMC,KAAKC,UAAUR,KACvB,OAJK,IAAHS,UAMKC,IAAER,SAAA,MAAA,MACD,IAAIS,MAASF,EAAIG,WAAUH,EAAII,YAAa,OAAA,OAAAX,UAGnCO,EAAIK,OAAM,QAAnB,yBACHP,KAAKQ,eAAW,QAAA,UAAA,0BAC1B,qBAjBwB,oCEAzB,SAAqBC,EAAKC,QACX,IAARA,IAAiBA,EAAM,IAC5B,IAAIC,EAAWD,EAAIC,SAEnB,GAAgC,oBAAbC,SAAnB,CAEA,IAAIC,EAAOD,SAASC,MAAQD,SAASE,qBAAqB,QAAQ,GAC9DC,EAAQH,SAASI,cAAc,SACnCD,EAAME,KAAO,WAEI,QAAbN,GACEE,EAAKK,WACPL,EAAKM,aAAaJ,EAAOF,EAAKK,YAKhCL,EAAKO,YAAYL,GAGfA,EAAMM,WACRN,EAAMM,WAAWC,QAAUb,EAE3BM,EAAMK,YAAYR,SAASW,eAAed,qtCDoB9C,SAAKvB,GACDA,mBACAA,2BACAA,yBACAA,uCACAA,6BACAA,2BACAA,uBACAA,qBARJ,CAAKA,IAAAA,OAWL,IAAMsC,EAAyB,CAC3BC,SAAS,EACTC,YAAY,EACZC,SAAU,KACVC,UAAW,KACXC,eAAgB,OAChBC,QAAS,GACTC,SAAU,GAwad,SAASC,EAAcC,GACnB,IAAMC,EAAIC,KAAKC,MAAOD,KAAKE,IAAIJ,GAAQE,KAAKE,IAAI,OAEhD,OADgBJ,EAAOE,KAAKG,IAAI,KAAMJ,IAAKK,QAAQ,OAChC,CAAC,IAAK,KAAM,KAAM,KAAM,MAAML,yBAxaxBM,cAAsD,WAoBhF9B,OAnBCtB,IAAAA,WACAqD,IAAAA,WAAUC,IACVC,WAAAA,aEnEM,8YFoENC,IAAAA,YACAC,IAAAA,MACAC,IAAAA,SAAQC,IACRC,cAAAA,aAAgB,cAAWC,IAC3BC,SAAAA,gBAAeC,IACfC,GAAAA,aAAK,KAAEC,IACPC,KAAAA,aAAO,KAAEC,IACTC,QAAAA,aAAUhC,IACViC,IAAAA,QACAC,IAAAA,WACAC,IAAAA,WACAC,IAAAA,SACAC,IAAAA,QACAC,IAAAA,YACAC,IAAAA,cACAC,IAAAA,eAIMC,EAAcC,SAAyB,QAEjBC,WAAkE,CAACC,MAAOlF,EAAemF,KAAMC,IAAK,KAAzHjE,OAAQkE,SACqBJ,gBAA6BK,GAA1DC,OAAYC,SAC2BP,gBAA2BK,GAAlEG,OAAiBC,SAC4BT,WAASnB,GAAtD6B,OAAoBC,SACWX,YAAkB,GAAjDY,OAAaC,SACkBb,gBAAcK,GAA7CS,OAAaC,WACUf,YAAS,GAAhCgB,SAASC,YAC0BjB,WAAS,IAA5CkB,SAAeC,SAGtBC,sBAAoB7E,GAAK,WAAA,MAAO,CAC5B8E,0BAAY,aAAA,UAAA,6BAAA,OAAA,sBAAA,OAAA,GACJnF,EAAO+D,QAAUlF,EAAeuG,QAAUpF,EAAO+D,QAAUlF,EAAewG,UAAQ/F,SAAA,MAC/B,OAAnD4E,EAAU,CAACH,MAAOlF,EAAeuG,OAAQnB,IAAK,wBACvC,GAAI,OAAA,SAIXL,YAAAA,EAAa0B,WAAbC,EAAsBC,OAA8C,IAArC5B,EAAY0B,QAAQE,MAAMC,QAAYnG,UAAA,MAAA,GACjEU,EAAO+D,QAAUlF,EAAe6G,UAAQpG,UAAA,MAGxC,OAFC8C,GAAcgB,GAAWA,IAE1B9D,SACgBqG,SAAY/B,YAAAA,EAAa0B,gBAAbM,EAAsBJ,MAAM,GAAGvC,WAAMW,YAAAA,EAAa0B,gBAAbO,EAAsBL,MAAM,IAAW,OAAjG,YACFlG,UAAA,MAAA,0BACM,GAAI,QAAA,0BAEJ,GAAK,QAI8B,OAAlD4E,EAAU,CAACH,MAAOlF,EAAeiH,MAAO7B,IAAK,wBACtC,GAAK,QAEmC,OAAnDC,EAAU,CAACH,MAAOlF,EAAeuG,OAAQnB,IAAK,wBACvC,GAAI,QAAA,UAAA,0BACd,WAAA,2CAGL8B,aAAU,WACFzD,GACA+B,EAAc/B,KAEnB,IAEHyD,aAAU,uBACFnB,YAAAA,EAAaoB,SAAbC,EAAqBC,MACrBnB,IAAW,GACXoB,GAAavB,EAAYoB,OAAOE,QAErC,CAACtB,IAEJmB,aAAU,WACF/F,EAAO+D,QAAUlF,EAAemF,OAChCS,EAAsB9B,GACtB4B,OAAmBJ,IAGnBnE,EAAO+D,QAAUlF,EAAe6G,UAChCjB,EAAsB,eAGtBzE,EAAO+D,QAAUlF,EAAeuH,SACrB3B,EAAX5B,cAA6C7C,EAAOiE,QAAgC,WAGpFjE,EAAO+D,QAAUlF,EAAewH,iBAChC5B,EAAsB,gBACtBE,GAAe,IAGf3E,EAAO+D,QAAUlF,EAAeyH,YAChC7B,EAAsBzE,EAAOiE,KACzBX,SAActD,GAAAA,EAAQuG,UACtBjD,EAAWtD,EAAOuG,WAItBvG,EAAO+D,QAAUlF,EAAewG,WAChCZ,EAAsB,QACtBE,GAAe,GACXtB,GAAYA,IACZE,GAAUA,GAAS,EAAMyB,KAG7BzB,GAAYvD,EAAO+D,QAAUlF,EAAeuG,QAC3C7B,GAAS,EAAMyB,IAGhBhF,EAAO+D,QAAUlF,EAAeiH,QAChCrB,EAAsB,SACtBE,GAAe,GACfnB,GAAWA,EAAQxD,EAAOiE,KACtBV,GAAUA,GAAS,EAAOyB,OAGnC,CAAChF,IAGJ+F,aAAU,WACFvD,GAEmB,MAAfD,IACAA,EAAc,IAGW,KAAzBA,EAAYiE,OAAO,IAAkC,KAArBhE,EAAMgE,MAAM,EAAG,KAC/CjE,GAA4B,KAG3BuC,KACDL,EAAsB9B,GACtBgC,GAAe,SACXf,GAAAA,EAAa0B,UAEb1B,EAAY0B,QAAQ9C,MAAM,IAG9B6B,KAAiB9B,EAAcC,MAKnC6B,EAAc/B,GACdmC,EAAsB9B,IAG1BoC,IAAW,GACXvC,GAASyC,GAAiBzC,KAE3B,CAACA,IAEJ,IAAM2D,GAAe,SAAC3D,GAClB,IAAMiE,EAAQ,CACVC,QAAS,aACTC,OAAQ,CACN/F,KAAM,SACNmC,GAAIA,EACJE,KAAMA,EACNT,MAAOA,IAIXyC,GAAiBzC,GACjBC,GAAYA,EAASgE,IAGrBG,GAAa,SAACC,GAAU,OAChC,IAAIC,SAAQ,SAACC,GACZC,EAAQC,iBACPJ,EACA1D,EAAQ7B,SACR6B,EAAQ5B,UACR4B,EAAQ3B,eACR2B,EAAQ1B,QACR0B,EAAQzB,UACR,SAACwF,GACIA,aAAeC,MAAMJ,EAAQG,KAElC,YAIME,cAAY,kBAAG,WAAOX,GAA0C,UAAA,6BAAA,OAAA,sBAAA,OAAA,KAC9DA,EAAME,OAAOnB,OAASiB,EAAME,OAAOnB,MAAMC,OAAS,IAAC4B,UAAA,MAIV,GAHzCjF,GAAcgB,GAAWA,IACzBc,EAAU,CAACH,MAAOlF,EAAemF,KAAMC,IAAK,KACtC4C,EAAOJ,EAAME,OAAOnB,MAAM,GAChCnB,EAAciD,IAAIC,gBAAgBV,KAE9B1D,EAAQ/B,UAAW+B,EAAQ9B,YAAUgG,UAAA,MAGoB,OAHpBA,SAEjC3D,GAAiBA,IACjBQ,EAAU,CAACH,MAAOlF,EAAe6G,SAAUzB,IAAK,KAAKoD,UACjCT,GAAWC,GAAK,SAA9BW,oBAEeL,MACjB5C,EAAmBiD,GACnBtD,EAAU,CAACH,MAAOlF,EAAeuH,QAASnC,IAAKwD,OAAO9F,EAAc6F,EAAM5F,SAEtEQ,GACAuD,GAAYkB,EAAK5D,KAAMuE,IAG3BtD,EAAU,CAACH,MAAOlF,EAAeiH,MAAO7B,IAAK,oBAChDoD,UAAA,MAAA,QAAAA,UAAAA,gBAGDK,QAAQ1F,IAAI,cAEgB2F,EAAxBN,gBAAiBtH,MAAiBsH,KAAMM,QAC7BF,aACfvD,EAAU,CAACH,MAAOlF,EAAeiH,MAAO7B,IAAK0D,IAAU,QAEpB,OAFoBN,UAEvD1D,GAAkBA,iBAAiB,QAAA0D,UAAA,MAAA,QAGnCjF,GACAuD,GAAYkB,EAAK5D,KAAM4D,GAC1B,QAAA,UAAA,8CAIZ,mBAxCiB,mCA6DZe,GAAiB,SAACC,GACpB,GAAIA,EAAGC,iBAAkB,CACrB,IAAIC,EAAkBjG,KAAKkG,MAAOH,EAAGI,OAASJ,EAAGK,MAAS,KAC1DhE,EAAU,CAACH,MAAOlF,EAAeyH,UAAWrC,IAAKwD,OAAOM,GAAiB,IAAKxB,SAAUwB,MAI1F5C,GAAa,SAAC0B,EAAYsB,GAC5B,OAAO,IAAIrB,SAAQ,SAACC,EAASqB,GACzB,IAAIC,EAAM,IAAIC,eACdD,EAAIE,KAAK,OAAQJ,EAAOK,KACxBH,EAAII,QAAU,IACdJ,EAAIK,OAAOC,WAAaf,GAExB,IAAIgB,EAAW,IAAIC,SACnB,IAAK,IAAI3C,KAAOiC,EAAOnC,OACR,QAAPE,GACA0C,EAASzJ,OAAO+G,EAAKiC,EAAOnC,OAAOE,IAI3C0C,EAASzJ,OAAO,OAAQ0H,GAExBwB,EAAIS,OAAS,WAET5E,EAAU,CAACH,MAAOlF,EAAewG,SAAUpB,IAAK,KAChD8C,EAAQsB,EAAIrI,SAGhBqI,EAAIU,QAAU,SAACC,GACXZ,EAAO,SACPzD,GAAe,GACfF,EAAsB,SACtBP,EAAU,CAACH,MAAOlF,EAAeiH,MAAO7B,IAAKwD,OAAOuB,EAAErC,OAAO3G,UAC7DiJ,2CAA2CD,EAAErC,OAAO1G,iBAGxDoI,EAAIa,UAAY,WACZd,EAAO,WACPzD,GAAe,GACfF,EAAsB,SACtBP,EAAU,CAACH,MAAOlF,EAAeiH,MAAO7B,IAAK,aAC7CgF,sDAGJZ,EAAIc,KAAKP,OAMXQ,cAAW,kBAAG,WAAOvC,GAAU,MAAA,6BAAA,OAAA,sBAAA,OAAA,IAC7B1D,EAAQ/B,UAAW+B,EAAQ9B,YAAUgI,SAAA,MAAA,IAEjC/E,GAAe+E,SAAA,MAAA,yBACR/E,GAAe,OAAA,IAGtBuC,GAAIwC,SAAA,MAAA,yBACGxC,GAAI,OAGmC,OAAlD3C,EAAU,CAACH,MAAOlF,EAAeiH,MAAO7B,IAAK,4BACtCE,GAAS,OAAA,IAGhBhB,EAAQ/B,SAAY+B,EAAQ9B,YAAUgI,UAAA,MAGmB,OAHnBA,SAElC3F,GAAiBA,IACjBQ,EAAU,CAACH,MAAOlF,EAAe6G,SAAUzB,IAAK,KAAKoF,UACjCzC,GAAWC,GAAK,QAAzB,MAALW,oBAEeL,OAAIkC,UAAA,MAC8D,OAAnFnF,EAAU,CAACH,MAAOlF,EAAeuH,QAASnC,IAAKwD,OAAO9F,EAAc6F,EAAM5F,2BACnE4F,GAAK,QAEqD,OAAjEtD,EAAU,CAACH,MAAOlF,EAAeiH,MAAO7B,IAAK,2CACtCE,GAAS,QAIe,OAJfkF,UAIpB1F,GAAkBA,iBAAiB,QAAA,GAKtCR,EAAQ/B,SAAOiI,UAAA,MAAA,yBACTxC,GAAI,QAAA,8BAGR1C,GAAS,QAAA,UAAA,4CACnB,mBAxCgB,mCA2CXwB,cAAW,kBAAG,WAAO2D,EAAkBzC,GAAU,UAAA,6BAAA,OAAA,sBAAA,OAKrB,OALqB0C,SAE/CD,EAAWA,EAASE,QAAQ,MAAO,IAEnCtF,EAAU,CAACH,MAAOlF,EAAewH,eAAgBpC,IAAK,KACtDY,QAAeV,GAAWoF,SAEFzK,EAAaC,EAAYuK,GAAS,OAIzD,OAHDzE,GADM4E,UAEFhG,GACAA,EAAYgG,GACfF,UAE2BH,GAAYvC,GAAK,QAA1B,KAAb6C,WACWH,UAAA,MAAA,OAAAA,UACPpE,GAAWuE,EAAeD,GAAU,QAAA,0BACnC,GAAI,QAAA,0BAGR,GAAK,QAM2C,OAN3CF,UAAAA,gBAIgB5B,EAAxB4B,gBAAiBxJ,MAAiBwJ,KAAM5B,QAC7BF,aACfvD,EAAU,CAACH,MAAOlF,EAAeiH,MAAO7B,IAAK0D,uBACtC,GAAK,QAAA,UAAA,wCAGnB,qBA7BgB,mCA2CjB,OACIgC,uBAAKC,UAAU,yBAAyBlJ,MAAO,CAACmJ,SAAU,aAEtDF,uBAAK5G,GAAG,gBAAgB+G,IAAK1F,EAAY8B,IAAK9B,EAAY2F,IAAI,KAE9DJ,uBAAKjJ,MAAO,CAACsJ,OAAQ,WACjBjH,GAAG,0BACH+G,IGzcN,41DH0cMG,QApBO,WACf9D,GAAa,IACb9B,EAAc/B,GACd4B,EAAU,CAACH,MAAOlF,EAAemF,KAAMC,IAAK,WACxCL,GAAAA,EAAa0B,UAEb1B,EAAY0B,QAAQ9C,MAAM,KAetBuH,IAAI,KAGPrF,GAAeiF,wBAAMC,UAAU,YAEhCD,0BACIC,UAAU,SACVhJ,KAAK,SACLqJ,QAAS,WACLtF,GAAe,GACfF,EAAsB9B,GAEtBiB,EAAY0B,QAAQ4E,uBAEZ,gBAEX1F,GAEK,IAEVmF,yBAAOtJ,IAAKuD,EAAahD,KAAK,OAAOuJ,OAAO,UAAUzJ,MAAO,CAAC0J,QAAS,QAAS3H,SAAU2E,iBAA0B"}