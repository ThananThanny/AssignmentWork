import React, { forwardRef, useRef, useState, useImperativeHandle, useEffect } from 'react';
import Resizer from 'react-image-file-resizer';

function _regeneratorRuntime() {
  _regeneratorRuntime = function () {
    return exports;
  };
  var exports = {},
    Op = Object.prototype,
    hasOwn = Op.hasOwnProperty,
    defineProperty = Object.defineProperty || function (obj, key, desc) {
      obj[key] = desc.value;
    },
    $Symbol = "function" == typeof Symbol ? Symbol : {},
    iteratorSymbol = $Symbol.iterator || "@@iterator",
    asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator",
    toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";
  function define(obj, key, value) {
    return Object.defineProperty(obj, key, {
      value: value,
      enumerable: !0,
      configurable: !0,
      writable: !0
    }), obj[key];
  }
  try {
    define({}, "");
  } catch (err) {
    define = function (obj, key, value) {
      return obj[key] = value;
    };
  }
  function wrap(innerFn, outerFn, self, tryLocsList) {
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator,
      generator = Object.create(protoGenerator.prototype),
      context = new Context(tryLocsList || []);
    return defineProperty(generator, "_invoke", {
      value: makeInvokeMethod(innerFn, self, context)
    }), generator;
  }
  function tryCatch(fn, obj, arg) {
    try {
      return {
        type: "normal",
        arg: fn.call(obj, arg)
      };
    } catch (err) {
      return {
        type: "throw",
        arg: err
      };
    }
  }
  exports.wrap = wrap;
  var ContinueSentinel = {};
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}
  var IteratorPrototype = {};
  define(IteratorPrototype, iteratorSymbol, function () {
    return this;
  });
  var getProto = Object.getPrototypeOf,
    NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype);
  var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function (method) {
      define(prototype, method, function (arg) {
        return this._invoke(method, arg);
      });
    });
  }
  function AsyncIterator(generator, PromiseImpl) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if ("throw" !== record.type) {
        var result = record.arg,
          value = result.value;
        return value && "object" == typeof value && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) {
          invoke("next", value, resolve, reject);
        }, function (err) {
          invoke("throw", err, resolve, reject);
        }) : PromiseImpl.resolve(value).then(function (unwrapped) {
          result.value = unwrapped, resolve(result);
        }, function (error) {
          return invoke("throw", error, resolve, reject);
        });
      }
      reject(record.arg);
    }
    var previousPromise;
    defineProperty(this, "_invoke", {
      value: function (method, arg) {
        function callInvokeWithMethodAndArg() {
          return new PromiseImpl(function (resolve, reject) {
            invoke(method, arg, resolve, reject);
          });
        }
        return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
      }
    });
  }
  function makeInvokeMethod(innerFn, self, context) {
    var state = "suspendedStart";
    return function (method, arg) {
      if ("executing" === state) throw new Error("Generator is already running");
      if ("completed" === state) {
        if ("throw" === method) throw arg;
        return doneResult();
      }
      for (context.method = method, context.arg = arg;;) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }
        if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) {
          if ("suspendedStart" === state) throw state = "completed", context.arg;
          context.dispatchException(context.arg);
        } else "return" === context.method && context.abrupt("return", context.arg);
        state = "executing";
        var record = tryCatch(innerFn, self, context);
        if ("normal" === record.type) {
          if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue;
          return {
            value: record.arg,
            done: context.done
          };
        }
        "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg);
      }
    };
  }
  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];
    if (undefined === method) {
      if (context.delegate = null, "throw" === context.method) {
        if (delegate.iterator.return && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel;
        context.method = "throw", context.arg = new TypeError("The iterator does not provide a 'throw' method");
      }
      return ContinueSentinel;
    }
    var record = tryCatch(method, delegate.iterator, context.arg);
    if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel;
    var info = record.arg;
    return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel);
  }
  function pushTryEntry(locs) {
    var entry = {
      tryLoc: locs[0]
    };
    1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry);
  }
  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal", delete record.arg, entry.completion = record;
  }
  function Context(tryLocsList) {
    this.tryEntries = [{
      tryLoc: "root"
    }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0);
  }
  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) return iteratorMethod.call(iterable);
      if ("function" == typeof iterable.next) return iterable;
      if (!isNaN(iterable.length)) {
        var i = -1,
          next = function next() {
            for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next;
            return next.value = undefined, next.done = !0, next;
          };
        return next.next = next;
      }
    }
    return {
      next: doneResult
    };
  }
  function doneResult() {
    return {
      value: undefined,
      done: !0
    };
  }
  return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, "constructor", {
    value: GeneratorFunctionPrototype,
    configurable: !0
  }), defineProperty(GeneratorFunctionPrototype, "constructor", {
    value: GeneratorFunction,
    configurable: !0
  }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) {
    var ctor = "function" == typeof genFun && genFun.constructor;
    return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name));
  }, exports.mark = function (genFun) {
    return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun;
  }, exports.awrap = function (arg) {
    return {
      __await: arg
    };
  }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
    return this;
  }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {
    void 0 === PromiseImpl && (PromiseImpl = Promise);
    var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);
    return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) {
      return result.done ? result.value : iter.next();
    });
  }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () {
    return this;
  }), define(Gp, "toString", function () {
    return "[object Generator]";
  }), exports.keys = function (val) {
    var object = Object(val),
      keys = [];
    for (var key in object) keys.push(key);
    return keys.reverse(), function next() {
      for (; keys.length;) {
        var key = keys.pop();
        if (key in object) return next.value = key, next.done = !1, next;
      }
      return next.done = !0, next;
    };
  }, exports.values = values, Context.prototype = {
    constructor: Context,
    reset: function (skipTempReset) {
      if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined);
    },
    stop: function () {
      this.done = !0;
      var rootRecord = this.tryEntries[0].completion;
      if ("throw" === rootRecord.type) throw rootRecord.arg;
      return this.rval;
    },
    dispatchException: function (exception) {
      if (this.done) throw exception;
      var context = this;
      function handle(loc, caught) {
        return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught;
      }
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i],
          record = entry.completion;
        if ("root" === entry.tryLoc) return handle("end");
        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc"),
            hasFinally = hasOwn.call(entry, "finallyLoc");
          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
            if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
          } else {
            if (!hasFinally) throw new Error("try statement without catch or finally");
            if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
          }
        }
      }
    },
    abrupt: function (type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }
      finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null);
      var record = finallyEntry ? finallyEntry.completion : {};
      return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record);
    },
    complete: function (record, afterLoc) {
      if ("throw" === record.type) throw record.arg;
      return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel;
    },
    finish: function (finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel;
      }
    },
    catch: function (tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if ("throw" === record.type) {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }
      throw new Error("illegal catch attempt");
    },
    delegateYield: function (iterable, resultName, nextLoc) {
      return this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      }, "next" === this.method && (this.arg = undefined), ContinueSentinel;
    }
  }, exports;
}
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }
  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}
function _asyncToGenerator(fn) {
  return function () {
    var self = this,
      args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);
      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }
      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }
      _next(undefined);
    });
  };
}

var fetchUrlSign = /*#__PURE__*/function () {
  var _ref = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(signingUrl, fileName) {
    var myHeaders, bodyObject, res, json;
    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            myHeaders = new Headers();
            myHeaders.append("Content-type", "application/json");
            bodyObject = {
              objectName: fileName
            };
            _context.next = 5;
            return fetch(signingUrl, {
              method: 'POST',
              headers: myHeaders,
              body: JSON.stringify(bodyObject)
            });
          case 5:
            res = _context.sent;
            if (res.ok) {
              _context.next = 8;
              break;
            }
            throw new Error(res.status + " " + res.statusText);
          case 8:
            _context.next = 10;
            return res.json();
          case 10:
            json = _context.sent;
            return _context.abrupt("return", JSON.parse(json));
          case 12:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return function fetchUrlSign(_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();

var img = "data:image/svg+xml,%3c%3fxml version='1.0' encoding='utf-8'%3f%3e%3c!-- Generator: Adobe Illustrator 13.0.0%2c SVG Export Plug-In . SVG Version: 6.00 Build 14948) --%3e%3c!DOCTYPE svg PUBLIC '-//W3C//DTD SVG 1.1//EN' 'http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd' %5b %3c!ENTITY st0 'fill:%23F44336%3b'%3e %3c!ENTITY st1 'fill:white%3b'%3e%5d%3e%3csvg version='1.1' id='Ebene_1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' x='0px' y='0px' width='595.275px' height='841.891px' viewBox='0 0 595.275 841.891' style='enable-background:new 0 0 595.275 841.891%3b' xml:space='preserve'%3e%3cg%3e %3cpath style='%26st1%3b' d='M326.039%2c513.568h-69.557v-9.441c0-10.531%2c2.12-19.876%2c6.358-28.034 c4.239-8.156%2c13.165-18.527%2c26.783-31.117l12.33-11.176c7.322-6.678%2c12.684-12.973%2c16.09-18.882 c3.4-5.907%2c5.105-11.817%2c5.105-17.727c0-8.99-3.084-16.022-9.248-21.098c-6.166-5.073-14.773-7.611-25.819-7.611 c-10.405%2c0-21.646%2c2.152-33.719%2c6.455c-12.075%2c4.305-24.663%2c10.693-37.765%2c19.171v-60.5c15.541-5.395%2c29.735-9.375%2c42.582-11.946 c12.843-2.568%2c25.241-3.854%2c37.186-3.854c31.342%2c0%2c55.232%2c6.392%2c71.678%2c19.171c16.439%2c12.783%2c24.662%2c31.439%2c24.662%2c55.973 c0%2c12.591-2.506%2c23.862-7.516%2c33.815c-5.008%2c9.956-13.553%2c20.649-25.625%2c32.08l-12.332%2c10.983 c-8.736%2c7.966-14.451%2c14.354-17.148%2c19.171s-4.045%2c10.115-4.045%2c15.896V513.568z M256.482%2c542.085h69.557v68.593h-69.557V542.085z' /%3e%3c/g%3e%3ccircle style='%26st0%3b' cx='299.76' cy='439.067' r='218.516'/%3e%3cg%3e %3crect x='267.162' y='307.978' transform='matrix(0.7071 -0.7071 0.7071 0.7071 -222.6202 340.6915)' style='%26st1%3b' width='65.545' height='262.18'/%3e %3crect x='266.988' y='308.153' transform='matrix(0.7071 0.7071 -0.7071 0.7071 398.3889 -83.3116)' style='%26st1%3b' width='65.544' height='262.179'/%3e%3c/g%3e%3c/svg%3e";

function styleInject(css, ref) {
  if ( ref === void 0 ) ref = {};
  var insertAt = ref.insertAt;

  if (!css || typeof document === 'undefined') { return; }

  var head = document.head || document.getElementsByTagName('head')[0];
  var style = document.createElement('style');
  style.type = 'text/css';

  if (insertAt === 'top') {
    if (head.firstChild) {
      head.insertBefore(style, head.firstChild);
    } else {
      head.appendChild(style);
    }
  } else {
    head.appendChild(style);
  }

  if (style.styleSheet) {
    style.styleSheet.cssText = css;
  } else {
    style.appendChild(document.createTextNode(css));
  }
}

var css_248z = "#imageS3Upload {\r\n    width: 100%;\r\n    height: auto; \r\n    border-radius: 5px;\r\n}\r\n\r\n#imageDeleteIconS3Upload {\r\n    width: 46px; \r\n    height: 46px; \r\n    position: absolute; \r\n    top: -9px; \r\n    right: -8px;\r\n}\r\n\r\n.imageS3UploadContainer .button{\r\n    background-color: #fff;\r\n    color: gray;    \r\n    font-size: 1rem;\r\n    font-weight: 400;\r\n    font-style: normal;\r\n    text-decoration: none;\r\n    padding: 9px 10px;\r\n    margin-top: 15px;\r\n    border: 1px solid gray;\r\n    border-radius: 3px;\r\n    display: inline-block;\r\n    width: 100%;\r\n    transition-duration: 0.4s;\r\n}\r\n\r\n.imageS3UploadContainer .button:hover{\r\n    background-color: gray;\r\n    color: #fff; \r\n}\r\n\r\n\r\n\r\n@keyframes spinner {\r\n    to {transform: rotate(360deg);}\r\n  }\r\n   \r\n  .imageS3UploadContainer .spinner:before {\r\n    content: '';\r\n    box-sizing: border-box;\r\n    position: absolute;\r\n    top: 25%;\r\n    left: 50%;\r\n    width: 20px;\r\n    height: 20px;\r\n    margin-top: -10px;\r\n    margin-left: -10px;\r\n    border-radius: 50%;\r\n    border: 2px solid #ccc;\r\n    border-top-color: #000;\r\n    animation: spinner .6s linear infinite;\r\n  }";
styleInject(css_248z);

var img$1 = "data:image/svg+xml,%3csvg width='24px' height='24px' viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg'%3e%3cpath fill='rgb(220%2c220%2c220)' d='M4 5h13v7h2V5c0-1.103-.897-2-2-2H4c-1.103 0-2 .897-2 2v12c0 1.103.897 2 2 2h8v-2H4V5z'/%3e%3cpath fill='rgb(220%2c220%2c220)' d='m8 11-3 4h11l-4-6-3 4z'/%3e%3cpath fill='rgb(220%2c220%2c220)' d='M19 14h-2v3h-3v2h3v3h2v-3h3v-2h-3z'/%3e%3c/svg%3e";

var stateComponent;
(function (stateComponent) {
  stateComponent[stateComponent["none"] = 0] = "none";
  stateComponent[stateComponent["resizing"] = 1] = "resizing";
  stateComponent[stateComponent["resized"] = 2] = "resized";
  stateComponent[stateComponent["startingUpload"] = 3] = "startingUpload";
  stateComponent[stateComponent["uploading"] = 4] = "uploading";
  stateComponent[stateComponent["uploaded"] = 5] = "uploaded";
  stateComponent[stateComponent["finish"] = 6] = "finish";
  stateComponent[stateComponent["error"] = 7] = "error";
})(stateComponent || (stateComponent = {}));
var defaultResizingOptions = {
  enabled: false,
  autoResize: true,
  maxWidth: 1280,
  maxHeight: 1280,
  compressFormat: "JPEG",
  quality: 70,
  rotation: 0
};
var ImageS3Upload = /*#__PURE__*/forwardRef(function (_ref, ref) {
  var signingUrl = _ref.signingUrl,
    autoUpload = _ref.autoUpload,
    _ref$emptyPhoto = _ref.emptyPhoto,
    emptyPhoto = _ref$emptyPhoto === void 0 ? img$1 : _ref$emptyPhoto,
    serverPhoto = _ref.serverPhoto,
    value = _ref.value,
    onChange = _ref.onChange,
    _ref$buttonCaption = _ref.buttonCaption,
    buttonCaption = _ref$buttonCaption === void 0 ? 'Browse...' : _ref$buttonCaption,
    _ref$showSize = _ref.showSize,
    showSize = _ref$showSize === void 0 ? true : _ref$showSize,
    _ref$id = _ref.id,
    id = _ref$id === void 0 ? '' : _ref$id,
    _ref$name = _ref.name,
    name = _ref$name === void 0 ? '' : _ref$name,
    _ref$resizer = _ref.resizer,
    resizer = _ref$resizer === void 0 ? defaultResizingOptions : _ref$resizer,
    onStart = _ref.onStart,
    onUploaded = _ref.onUploaded,
    onProgress = _ref.onProgress,
    onFinish = _ref.onFinish,
    onError = _ref.onError,
    onSignedUrl = _ref.onSignedUrl,
    onResizeStart = _ref.onResizeStart,
    onResizeFinish = _ref.onResizeFinish;
  var inputFileEl = useRef(null);
  var _useState = useState({
      state: stateComponent.none,
      msg: ''
    }),
    status = _useState[0],
    setStatus = _useState[1];
  var _useState2 = useState(undefined),
    imagePhoto = _useState2[0],
    setImagePhoto = _useState2[1];
  var _useState3 = useState(undefined),
    compressedPhoto = _useState3[0],
    setCompressedPhoto = _useState3[1];
  var _useState4 = useState(buttonCaption),
    buttonCaptionState = _useState4[0],
    setButtonCaptionState = _useState4[1];
  var _useState5 = useState(false),
    showSpinner = _useState5[0],
    setShowSpinner = _useState5[1];
  var _useState6 = useState(undefined),
    s3DataState = _useState6[0],
    setS3DataState = _useState6[1];
  var _useState7 = useState(false),
    notLoad = _useState7[0],
    setNotLoad = _useState7[1]; // to prevent loading photo from S3 when we have this photo in blob input element
  var _useState8 = useState(''),
    filenameValue = _useState8[0],
    setFilenameValue = _useState8[1];
  // to be able to call method uploadFile
  useImperativeHandle(ref, function () {
    return {
      uploadFile: function () {
        var _uploadFile = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
          var _inputFileEl$current;
          var _inputFileEl$current2, _inputFileEl$current3, p;
          return _regeneratorRuntime().wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  if (!(status.state === stateComponent.finish || status.state === stateComponent.uploaded)) {
                    _context.next = 3;
                    break;
                  }
                  setStatus({
                    state: stateComponent.finish,
                    msg: ''
                  });
                  return _context.abrupt("return", true);
                case 3:
                  if (!(inputFileEl != null && (_inputFileEl$current = inputFileEl.current) != null && _inputFileEl$current.files && inputFileEl.current.files.length === 1)) {
                    _context.next = 16;
                    break;
                  }
                  if (!(status.state !== stateComponent.resizing)) {
                    _context.next = 14;
                    break;
                  }
                  !autoUpload && onStart && onStart();
                  //@ts-ignore
                  _context.next = 8;
                  return startUpload(inputFileEl == null ? void 0 : (_inputFileEl$current2 = inputFileEl.current) == null ? void 0 : _inputFileEl$current2.files[0].name, inputFileEl == null ? void 0 : (_inputFileEl$current3 = inputFileEl.current) == null ? void 0 : _inputFileEl$current3.files[0]);
                case 8:
                  p = _context.sent;
                  if (!p) {
                    _context.next = 13;
                    break;
                  }
                  return _context.abrupt("return", true);
                case 13:
                  return _context.abrupt("return", false);
                case 14:
                  setStatus({
                    state: stateComponent.error,
                    msg: ''
                  });
                  return _context.abrupt("return", false);
                case 16:
                  setStatus({
                    state: stateComponent.finish,
                    msg: ''
                  });
                  return _context.abrupt("return", true);
                case 18:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee);
        }));
        function uploadFile() {
          return _uploadFile.apply(this, arguments);
        }
        return uploadFile;
      }()
    };
  });
  useEffect(function () {
    if (emptyPhoto) {
      setImagePhoto(emptyPhoto);
    }
  }, []);
  useEffect(function () {
    var _s3DataState$fields;
    if (s3DataState != null && (_s3DataState$fields = s3DataState.fields) != null && _s3DataState$fields.key) {
      setNotLoad(true);
      fireOnChange(s3DataState.fields.key);
    }
  }, [s3DataState]);
  useEffect(function () {
    if (status.state === stateComponent.none) {
      setButtonCaptionState(buttonCaption);
      setCompressedPhoto(undefined);
    }
    if (status.state === stateComponent.resizing) {
      setButtonCaptionState("Resizing...");
    }
    if (status.state === stateComponent.resized) {
      showSize ? setButtonCaptionState("Resized (" + status.msg + ")") : setButtonCaptionState('Resized');
    }
    if (status.state === stateComponent.startingUpload) {
      setButtonCaptionState("Starting... ");
      setShowSpinner(true);
    }
    if (status.state === stateComponent.uploading) {
      setButtonCaptionState(status.msg);
      if (onProgress && status != null && status.intValue) {
        onProgress(status.intValue);
      }
    }
    if (status.state === stateComponent.uploaded) {
      setButtonCaptionState('Done');
      setShowSpinner(false);
      if (onUploaded) onUploaded();
      if (onFinish) onFinish(true, filenameValue);
    }
    if (onFinish && status.state === stateComponent.finish) {
      onFinish(true, filenameValue);
    }
    if (status.state === stateComponent.error) {
      setButtonCaptionState("Error");
      setShowSpinner(false);
      onError && onError(status.msg);
      if (onFinish) onFinish(false, filenameValue);
    }
  }, [status]);
  useEffect(function () {
    if (value) {
      if (serverPhoto == null) {
        serverPhoto = '';
      }
      if (serverPhoto.slice(-1) != '/' && value.slice(0, 1) != '/') {
        // if there is no symbol / between serverPhoto and value, just add it.
        serverPhoto = serverPhoto + '/';
      }
      if (!notLoad) {
        // to prevent loading photo from S3 when we have this photo in blob input element
        setButtonCaptionState(buttonCaption);
        setShowSpinner(false);
        if (inputFileEl != null && inputFileEl.current) {
          //@ts-ignore
          inputFileEl.current.value = '';
        }
        setImagePhoto("" + serverPhoto + value);
      }
    } else {
      setImagePhoto(emptyPhoto);
      setButtonCaptionState(buttonCaption);
    }
    setNotLoad(false);
    value && setFilenameValue(value);
  }, [value]);
  var fireOnChange = function fireOnChange(value) {
    var event = {
      persist: function persist() {},
      target: {
        type: "change",
        id: id,
        name: name,
        value: value
      }
    };
    setFilenameValue(value);
    onChange && onChange(event);
  };
  var resizeFile = function resizeFile(file) {
    return new Promise(function (resolve) {
      Resizer.imageFileResizer(file, resizer.maxWidth, resizer.maxHeight, resizer.compressFormat, resizer.quality, resizer.rotation, function (uri) {
        if (uri instanceof Blob) resolve(uri);
      }, "blob");
    });
  };
  var onChangeFile = /*#__PURE__*/function () {
    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(event) {
      var file, image, message;
      return _regeneratorRuntime().wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              if (!(event.target.files && event.target.files.length > 0)) {
                _context2.next = 26;
                break;
              }
              autoUpload && onStart && onStart();
              setStatus({
                state: stateComponent.none,
                msg: ''
              });
              file = event.target.files[0];
              setImagePhoto(URL.createObjectURL(file));
              if (!(resizer.enabled && resizer.autoResize)) {
                _context2.next = 25;
                break;
              }
              _context2.prev = 6;
              onResizeStart && onResizeStart();
              setStatus({
                state: stateComponent.resizing,
                msg: ''
              });
              _context2.next = 11;
              return resizeFile(file);
            case 11:
              image = _context2.sent;
              if (image instanceof Blob) {
                setCompressedPhoto(image);
                setStatus({
                  state: stateComponent.resized,
                  msg: String(humanFileSize(image.size))
                });
                if (autoUpload) {
                  startUpload(file.name, image);
                }
              } else {
                setStatus({
                  state: stateComponent.error,
                  msg: 'Resizing error.'
                });
              }
              _context2.next = 20;
              break;
            case 15:
              _context2.prev = 15;
              _context2.t0 = _context2["catch"](6);
              console.log('ERROR', _context2.t0);
              if (_context2.t0 instanceof Error) message = _context2.t0.message;else message = String(_context2.t0);
              setStatus({
                state: stateComponent.error,
                msg: message
              });
            case 20:
              _context2.prev = 20;
              onResizeFinish && onResizeFinish();
              return _context2.finish(20);
            case 23:
              _context2.next = 26;
              break;
            case 25:
              if (autoUpload) {
                startUpload(file.name, file);
              }
            case 26:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, null, [[6, 15, 20, 23]]);
    }));
    return function onChangeFile(_x) {
      return _ref2.apply(this, arguments);
    };
  }();
  // const fetchUrlSign = async (fileName: string) => {			
  // 	let myHeaders = new Headers();
  // 	myHeaders.append("Content-type", "application/json");  
  //     const bodyObject = {objectName: fileName};
  //     let res = await fetch(signingUrl, {
  //         method: 'POST',
  //         headers: myHeaders,
  //         body: JSON.stringify(bodyObject)
  //     });
  //     if (!res.ok) {
  //         throw new Error(`${res.status} ${res.statusText}`);
  //     }
  //     const json = await res.json();
  //     return JSON.parse(json);		
  // }
  var updateProgress = function updateProgress(ev) {
    if (ev.lengthComputable) {
      var percentComplete = Math.round(ev.loaded / ev.total * 100);
      setStatus({
        state: stateComponent.uploading,
        msg: String(percentComplete) + '%',
        intValue: percentComplete
      });
    }
  };
  var uploadFile = function uploadFile(file, s3Data) {
    return new Promise(function (resolve, reject) {
      var xhr = new XMLHttpRequest();
      xhr.open("POST", s3Data.url);
      xhr.timeout = 30000;
      xhr.upload.onprogress = updateProgress;
      var postData = new FormData();
      for (var key in s3Data.fields) {
        if (key != 'file') {
          // in field "file" must be blob of file.
          postData.append(key, s3Data.fields[key]);
          //console.log('append', key, s3Data.fields[key]);
        }
      }

      postData.append("file", file);
      xhr.onload = function () {
        // transaction completes successfully.
        setStatus({
          state: stateComponent.uploaded,
          msg: ''
        });
        resolve(xhr.status);
      };
      xhr.onerror = function (e) {
        reject('error');
        setShowSpinner(false);
        setButtonCaptionState('Error');
        setStatus({
          state: stateComponent.error,
          msg: String(e.target.status)
        });
        alert("Error during file upload (status: " + e.target.statusText + ")");
      };
      xhr.ontimeout = function () {
        reject('timeout');
        setShowSpinner(false);
        setButtonCaptionState('Error');
        setStatus({
          state: stateComponent.error,
          msg: 'Time out'
        });
        alert("Error during file upload (status: Time out)");
      };
      xhr.send(postData);
    });
  };
  var resizerFunc = /*#__PURE__*/function () {
    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(file) {
      var image;
      return _regeneratorRuntime().wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              if (!(resizer.enabled && resizer.autoResize)) {
                _context3.next = 7;
                break;
              }
              if (!compressedPhoto) {
                _context3.next = 3;
                break;
              }
              return _context3.abrupt("return", compressedPhoto);
            case 3:
              if (!file) {
                _context3.next = 5;
                break;
              }
              return _context3.abrupt("return", file);
            case 5:
              setStatus({
                state: stateComponent.error,
                msg: ''
              });
              return _context3.abrupt("return", undefined);
            case 7:
              if (!(resizer.enabled && !resizer.autoResize)) {
                _context3.next = 24;
                break;
              }
              _context3.prev = 8;
              onResizeStart && onResizeStart();
              setStatus({
                state: stateComponent.resizing,
                msg: ''
              });
              _context3.next = 13;
              return resizeFile(file);
            case 13:
              image = _context3.sent;
              if (!(image instanceof Blob)) {
                _context3.next = 19;
                break;
              }
              setStatus({
                state: stateComponent.resized,
                msg: String(humanFileSize(image.size))
              });
              return _context3.abrupt("return", image);
            case 19:
              setStatus({
                state: stateComponent.error,
                msg: 'Resizing error.'
              });
              return _context3.abrupt("return", undefined);
            case 21:
              _context3.prev = 21;
              onResizeFinish && onResizeFinish();
              return _context3.finish(21);
            case 24:
              if (resizer.enabled) {
                _context3.next = 26;
                break;
              }
              return _context3.abrupt("return", file);
            case 26:
              return _context3.abrupt("return", undefined);
            case 27:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3, null, [[8,, 21, 24]]);
    }));
    return function resizerFunc(_x2) {
      return _ref3.apply(this, arguments);
    };
  }();
  var startUpload = /*#__PURE__*/function () {
    var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(filename, file) {
      var signedUrl, fileForUpload, message;
      return _regeneratorRuntime().wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              _context4.prev = 0;
              filename = filename.replace(/\s/g, ''); // remove spaces, because there is some problem with restAPI, which return url filename with %20 instead space, after that when we savind data again, %20 will be convert to %2520 (% = %25)
              setStatus({
                state: stateComponent.startingUpload,
                msg: ''
              });
              setS3DataState(undefined);
              _context4.next = 6;
              return fetchUrlSign(signingUrl, filename);
            case 6:
              signedUrl = _context4.sent;
              setS3DataState(signedUrl);
              if (onSignedUrl) {
                onSignedUrl(signedUrl);
              }
              _context4.next = 11;
              return resizerFunc(file);
            case 11:
              fileForUpload = _context4.sent;
              if (!fileForUpload) {
                _context4.next = 16;
                break;
              }
              _context4.next = 15;
              return uploadFile(fileForUpload, signedUrl);
            case 15:
              return _context4.abrupt("return", true);
            case 16:
              return _context4.abrupt("return", false);
            case 19:
              _context4.prev = 19;
              _context4.t0 = _context4["catch"](0);
              if (_context4.t0 instanceof Error) message = _context4.t0.message;else message = String(_context4.t0);
              setStatus({
                state: stateComponent.error,
                msg: message
              });
              return _context4.abrupt("return", false);
            case 24:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4, null, [[0, 19]]);
    }));
    return function startUpload(_x3, _x4) {
      return _ref4.apply(this, arguments);
    };
  }();
  var clearImage = function clearImage() {
    fireOnChange('');
    setImagePhoto(emptyPhoto);
    setStatus({
      state: stateComponent.none,
      msg: ''
    });
    if (inputFileEl != null && inputFileEl.current) {
      //@ts-ignore
      inputFileEl.current.value = '';
    }
  };
  return React.createElement("div", {
    className: "imageS3UploadContainer",
    style: {
      position: "relative"
    }
  }, React.createElement("img", {
    id: "imageS3Upload",
    src: imagePhoto,
    key: imagePhoto,
    alt: ""
  }), React.createElement("img", {
    style: {
      cursor: "pointer"
    },
    id: "imageDeleteIconS3Upload",
    src: img,
    onClick: clearImage,
    alt: ""
  }), showSpinner && React.createElement("span", {
    className: "spinner"
  }), React.createElement("button", {
    className: "button",
    type: "button",
    onClick: function onClick() {
      setShowSpinner(false);
      setButtonCaptionState(buttonCaption);
      //@ts-ignore                        
      inputFileEl.current.click();
    },
    "data-testid": 'browseButton'
  }, buttonCaptionState), ' ', React.createElement("input", {
    ref: inputFileEl,
    type: "file",
    accept: "image/*",
    style: {
      display: "none"
    },
    onChange: onChangeFile,
    "data-testid": 'inputFile'
  }));
});
function humanFileSize(size) {
  var i = Math.floor(Math.log(size) / Math.log(1024));
  var sSize = (size / Math.pow(1024, i)).toFixed(0);
  return sSize + " " + ['B', 'kB', 'MB', 'GB', 'TB'][i];
}

export { ImageS3Upload };
//# sourceMappingURL=react-image-upload-s3.esm.js.map
