{"version":3,"file":"react-image-upload-s3.esm.js","sources":["../src/utils.ts","../src/delete.svg","../node_modules/style-inject/dist/style-inject.es.js","../src/noimage.svg","../src/ImageS3Upload.tsx"],"sourcesContent":["export const fetchUrlSign = async (signingUrl: string, fileName: string) => {\r\n    let myHeaders = new Headers();\r\n    myHeaders.append(\"Content-type\", \"application/json\");  \r\n    const bodyObject = {objectName: fileName};\r\n    \r\n    let res = await fetch(signingUrl, {\r\n        method: 'POST',\r\n        headers: myHeaders,\r\n        body: JSON.stringify(bodyObject)\r\n    });\r\n    \r\n    if (!res.ok) {\r\n        throw new Error(`${res.status} ${res.statusText}`);\r\n    }\r\n\r\n    const json = await res.json();\r\n    return JSON.parse(json);\r\n}","var img = \"data:image/svg+xml,%3c%3fxml version='1.0' encoding='utf-8'%3f%3e%3c!-- Generator: Adobe Illustrator 13.0.0%2c SVG Export Plug-In . SVG Version: 6.00 Build 14948) --%3e%3c!DOCTYPE svg PUBLIC '-//W3C//DTD SVG 1.1//EN' 'http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd' %5b %3c!ENTITY st0 'fill:%23F44336%3b'%3e %3c!ENTITY st1 'fill:white%3b'%3e%5d%3e%3csvg version='1.1' id='Ebene_1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' x='0px' y='0px' width='595.275px' height='841.891px' viewBox='0 0 595.275 841.891' style='enable-background:new 0 0 595.275 841.891%3b' xml:space='preserve'%3e%3cg%3e %3cpath style='%26st1%3b' d='M326.039%2c513.568h-69.557v-9.441c0-10.531%2c2.12-19.876%2c6.358-28.034 c4.239-8.156%2c13.165-18.527%2c26.783-31.117l12.33-11.176c7.322-6.678%2c12.684-12.973%2c16.09-18.882 c3.4-5.907%2c5.105-11.817%2c5.105-17.727c0-8.99-3.084-16.022-9.248-21.098c-6.166-5.073-14.773-7.611-25.819-7.611 c-10.405%2c0-21.646%2c2.152-33.719%2c6.455c-12.075%2c4.305-24.663%2c10.693-37.765%2c19.171v-60.5c15.541-5.395%2c29.735-9.375%2c42.582-11.946 c12.843-2.568%2c25.241-3.854%2c37.186-3.854c31.342%2c0%2c55.232%2c6.392%2c71.678%2c19.171c16.439%2c12.783%2c24.662%2c31.439%2c24.662%2c55.973 c0%2c12.591-2.506%2c23.862-7.516%2c33.815c-5.008%2c9.956-13.553%2c20.649-25.625%2c32.08l-12.332%2c10.983 c-8.736%2c7.966-14.451%2c14.354-17.148%2c19.171s-4.045%2c10.115-4.045%2c15.896V513.568z M256.482%2c542.085h69.557v68.593h-69.557V542.085z' /%3e%3c/g%3e%3ccircle style='%26st0%3b' cx='299.76' cy='439.067' r='218.516'/%3e%3cg%3e %3crect x='267.162' y='307.978' transform='matrix(0.7071 -0.7071 0.7071 0.7071 -222.6202 340.6915)' style='%26st1%3b' width='65.545' height='262.18'/%3e %3crect x='266.988' y='308.153' transform='matrix(0.7071 0.7071 -0.7071 0.7071 398.3889 -83.3116)' style='%26st1%3b' width='65.544' height='262.179'/%3e%3c/g%3e%3c/svg%3e\";\n  export default img;","function styleInject(css, ref) {\n  if ( ref === void 0 ) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') { return; }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nexport default styleInject;\n","var img = \"data:image/svg+xml,%3csvg width='24px' height='24px' viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg'%3e%3cpath fill='rgb(220%2c220%2c220)' d='M4 5h13v7h2V5c0-1.103-.897-2-2-2H4c-1.103 0-2 .897-2 2v12c0 1.103.897 2 2 2h8v-2H4V5z'/%3e%3cpath fill='rgb(220%2c220%2c220)' d='m8 11-3 4h11l-4-6-3 4z'/%3e%3cpath fill='rgb(220%2c220%2c220)' d='M19 14h-2v3h-3v2h3v3h2v-3h3v-2h-3z'/%3e%3c/svg%3e\";\n  export default img;","import React, { useState, useEffect, forwardRef, useRef, useImperativeHandle } from 'react';\r\nimport Resizer from \"react-image-file-resizer\";\r\nimport { fetchUrlSign } from \"./utils\";\r\nimport deleteImage from \"./delete.svg\";\r\nimport \"./style.css\";\r\nimport noImage from \"./noimage.svg\";\r\n\r\nexport interface ImageS3UploadProps {\r\n    signingUrl: string;\r\n    autoUpload: boolean;    \r\n    value?: string;\r\n    onChange?: (e: any) => void;    \r\n    emptyPhoto?: string; \r\n    serverPhoto?: string; \r\n    buttonCaption?: string;\r\n    showSize?: boolean;\r\n    id?: string;\r\n    name?: string;\r\n\r\n    resizer?: {\r\n        enabled: boolean;\r\n        autoResize: boolean; // otherwise resizing will be preform before uploading\r\n        maxWidth: number;\r\n        maxHeight: number;\r\n        compressFormat: string; // Can be either JPEG, PNG or WEBP\r\n        quality: number; // A number between 0 and 100. Used for the JPEG compression.\r\n        rotation: number; // Degree of clockwise rotation to apply to the image. Rotation is limited to multiples of 90 degrees.(if no rotation is needed, just set it to 0) (0, 90, 180, 270, 360)\r\n    };\r\n\r\n    onStart?: () => void;\r\n    onUploaded?: () => void;\r\n    onProgress?: (percent: number) => void;\r\n    onFinish?: (isSuccessful: boolean, urlImage: string) => void;\r\n    onError?: (msg: string) => void;\r\n    onSignedUrl?: (data: any)  => void;\r\n    onResizeStart?: () => void;\r\n    onResizeFinish?: () => void;\r\n}\r\n\r\ninterface RefObject {\r\n    uploadFile: () => Promise<boolean>\r\n}\r\n\r\nenum stateComponent {\r\n    none,    \r\n    resizing,\r\n    resized,\r\n    startingUpload,\r\n    uploading,\r\n    uploaded,\r\n    finish,\r\n    error\r\n}\r\n\r\nconst defaultResizingOptions = {\r\n    enabled: false,\r\n    autoResize: true, // otherwise resizing will be preform before uploading\r\n    maxWidth: 1280,\r\n    maxHeight: 1280,\r\n    compressFormat: \"JPEG\",\r\n    quality: 70,\r\n    rotation: 0\r\n}\r\n\r\nexport const ImageS3Upload = forwardRef<RefObject | undefined, ImageS3UploadProps>(({\r\n    signingUrl,\r\n    autoUpload,\r\n    emptyPhoto = noImage,\r\n    serverPhoto,\r\n    value,\r\n    onChange,\r\n    buttonCaption = 'Browse...',\r\n    showSize = true,\r\n    id = '',\r\n    name = '',\r\n    resizer = defaultResizingOptions,\r\n    onStart,\r\n    onUploaded,\r\n    onProgress,\r\n    onFinish,\r\n    onError,\r\n    onSignedUrl,\r\n    onResizeStart,\r\n    onResizeFinish\r\n}, ref) => {\r\n\r\n\r\n    const inputFileEl = useRef<HTMLInputElement>(null);\r\n    \r\n    const [status, setStatus] = useState<{state: stateComponent, msg: string, intValue?: number}>({state: stateComponent.none, msg: ''});\r\n    const [imagePhoto, setImagePhoto] = useState<string | undefined>(undefined);\r\n    const [compressedPhoto, setCompressedPhoto] = useState<Blob | undefined>(undefined);\r\n    const [buttonCaptionState, setButtonCaptionState] = useState(buttonCaption);\r\n    const [showSpinner, setShowSpinner] = useState<boolean>(false);    \r\n    const [s3DataState, setS3DataState] = useState<any>(undefined);\r\n    const [notLoad, setNotLoad] = useState(false); // to prevent loading photo from S3 when we have this photo in blob input element\r\n    const [filenameValue, setFilenameValue] = useState('');\r\n\r\n    // to be able to call method uploadFile\r\n    useImperativeHandle(ref, () => ({\r\n        uploadFile: async () => {             \r\n            if (status.state === stateComponent.finish || status.state === stateComponent.uploaded) {\r\n                setStatus({state: stateComponent.finish, msg: ''});\r\n                return true;\r\n            } \r\n              \r\n            //@ts-ignore\r\n            if (inputFileEl?.current?.files && inputFileEl.current.files.length === 1) {                \r\n                if (status.state !== stateComponent.resizing) {                    \r\n                    !autoUpload && onStart && onStart();\r\n                    \r\n                    //@ts-ignore\r\n                    const p = await startUpload(inputFileEl?.current?.files[0].name, inputFileEl?.current?.files[0] as Blob);                                       \r\n                    if (p) {\r\n                        return true;\r\n                    } else {\r\n                        return false;\r\n                    }\r\n                    \r\n                } \r\n                setStatus({state: stateComponent.error, msg: ''});               \r\n                return false;\r\n            }\r\n            setStatus({state: stateComponent.finish, msg: ''});\r\n            return true;                         \r\n        }\r\n    }));    \r\n\r\n    useEffect(()=>{\r\n        if (emptyPhoto) {\r\n            setImagePhoto(emptyPhoto);    \r\n        }  \r\n    }, []);\r\n\r\n    useEffect(()=>{        \r\n        if (s3DataState?.fields?.key) {\r\n            setNotLoad(true);            \r\n            fireOnChange(s3DataState.fields.key);\r\n        } \r\n    }, [s3DataState]);     \r\n    \r\n    useEffect(()=>{                  \r\n        if (status.state === stateComponent.none) {\r\n            setButtonCaptionState(buttonCaption); \r\n            setCompressedPhoto(undefined);\r\n        }  \r\n\r\n        if (status.state === stateComponent.resizing) {\r\n            setButtonCaptionState(\"Resizing...\");            \r\n        }   \r\n\r\n        if (status.state === stateComponent.resized) {\r\n            showSize ? setButtonCaptionState(`Resized (${status.msg})`) : setButtonCaptionState('Resized');            \r\n        }   \r\n\r\n        if (status.state === stateComponent.startingUpload) {\r\n            setButtonCaptionState(\"Starting... \");\r\n            setShowSpinner(true);\r\n        }                          \r\n          \r\n        if (status.state === stateComponent.uploading) {\r\n            setButtonCaptionState(status.msg);\r\n            if (onProgress && status?.intValue) {\r\n                onProgress(status.intValue);\r\n            }\r\n        }          \r\n            \r\n        if (status.state === stateComponent.uploaded) {\r\n            setButtonCaptionState('Done');\r\n            setShowSpinner(false); \r\n            if (onUploaded) onUploaded();   \r\n            if (onFinish) onFinish(true, filenameValue);\r\n        }\r\n\r\n        if (onFinish && status.state === stateComponent.finish) {\r\n             onFinish(true, filenameValue);\r\n        }  \r\n        \r\n        if (status.state === stateComponent.error) {\r\n            setButtonCaptionState(\"Error\");\r\n            setShowSpinner(false);\r\n            onError && onError(status.msg);\r\n            if (onFinish) onFinish(false, filenameValue);\r\n        }          \r\n        \r\n    }, [status]);\r\n\r\n\r\n    useEffect(()=>{                        \r\n        if (value) {\r\n            \r\n            if (serverPhoto == null) {\r\n                serverPhoto = '';    \r\n            }\r\n\r\n            if (serverPhoto.slice(-1) != '/' && value.slice(0, 1) != '/') { // if there is no symbol / between serverPhoto and value, just add it.\r\n                serverPhoto = serverPhoto + '/';\r\n            }\r\n\r\n            if (!notLoad) { // to prevent loading photo from S3 when we have this photo in blob input element\r\n                setButtonCaptionState(buttonCaption);\r\n                setShowSpinner(false);\r\n                if (inputFileEl?.current) {\r\n                    //@ts-ignore\r\n                    inputFileEl.current.value='';\r\n                }\r\n                                \r\n                setImagePhoto(`${serverPhoto}${value}`);\r\n            }\r\n                    \r\n          \r\n        } else {\r\n            setImagePhoto(emptyPhoto);\r\n            setButtonCaptionState(buttonCaption);\r\n        }\r\n               \r\n        setNotLoad(false);\r\n        value && setFilenameValue(value);\r\n        \r\n    }, [value]);   \r\n    \r\n    const fireOnChange = (value: string) => {\r\n        const event = {\r\n            persist: () => {},\r\n            target: {\r\n              type: \"change\",\r\n              id: id,\r\n              name: name,\r\n              value: value\r\n            }\r\n          };\r\n\r\n          setFilenameValue(value);\r\n          onChange && onChange(event);         \r\n    }\r\n\r\n    const resizeFile = (file: Blob): Promise<Blob> => \r\n\t\tnew Promise((resolve) => {\r\n\t\t\tResizer.imageFileResizer(\r\n\t\t\t\tfile,\r\n\t\t\t\tresizer.maxWidth,\r\n\t\t\t\tresizer.maxHeight,\r\n\t\t\t\tresizer.compressFormat,\r\n\t\t\t\tresizer.quality,\r\n\t\t\t\tresizer.rotation,\r\n\t\t\t\t(uri) => {\r\n\t\t\t\t\tif (uri instanceof Blob) resolve(uri);\r\n\t\t\t\t},\r\n\t\t\t\t\"blob\"\r\n\t\t\t);\r\n\t\t});\r\n\r\n    const onChangeFile = async (event: React.ChangeEvent<HTMLInputElement>) => {        \r\n        if (event.target.files && event.target.files.length > 0) {\r\n            autoUpload && onStart && onStart();\r\n            setStatus({state: stateComponent.none, msg: ''});\r\n            const file = event.target.files[0];            \r\n            setImagePhoto(URL.createObjectURL(file)); \r\n            \r\n            if (resizer.enabled && resizer.autoResize) {                                \r\n                try {                \r\n                    onResizeStart && onResizeStart();\r\n                    setStatus({state: stateComponent.resizing, msg: ''});                                        \r\n                    const image = await resizeFile(file);\r\n\r\n                    if (image instanceof Blob) {\r\n                        setCompressedPhoto(image);\r\n                        setStatus({state: stateComponent.resized, msg: String(humanFileSize(image.size))});                        \r\n    \r\n                        if (autoUpload) {\r\n                            startUpload(file.name, image);     \r\n                        }\r\n                    } else {\r\n                        setStatus({state: stateComponent.error, msg: 'Resizing error.'});                          \r\n                    }                     \r\n\r\n                } catch (error) {\r\n                    console.log('ERROR', error);\r\n                    let message\r\n                    if (error instanceof Error) message = error.message\r\n                    else message = String(error)\r\n                    setStatus({state: stateComponent.error, msg: message});                    \r\n                } finally {\r\n                    onResizeFinish && onResizeFinish();\r\n                }\r\n            } else {\r\n                if (autoUpload) {\r\n                    startUpload(file.name, file);     \r\n                }                \r\n            }            \r\n\r\n        }                \r\n    };\r\n\r\n\t// const fetchUrlSign = async (fileName: string) => {\t\t\t\r\n\t// \tlet myHeaders = new Headers();\r\n\t// \tmyHeaders.append(\"Content-type\", \"application/json\");  \r\n    //     const bodyObject = {objectName: fileName};\r\n        \r\n    //     let res = await fetch(signingUrl, {\r\n    //         method: 'POST',\r\n    //         headers: myHeaders,\r\n    //         body: JSON.stringify(bodyObject)\r\n    //     });\r\n        \r\n    //     if (!res.ok) {\r\n    //         throw new Error(`${res.status} ${res.statusText}`);\r\n    //     }\r\n\r\n    //     const json = await res.json();\r\n    //     return JSON.parse(json);\t\t\r\n\t// }\r\n\r\n    const updateProgress = (ev: ProgressEvent<EventTarget>) => {        \r\n        if (ev.lengthComputable) {\r\n            let percentComplete = Math.round((ev.loaded / ev.total) * 100);            \r\n            setStatus({state: stateComponent.uploading, msg: String(percentComplete)+'%', intValue: percentComplete})\r\n        }\r\n    } \r\n\r\n    const uploadFile = (file: Blob, s3Data: any) => {\r\n        return new Promise((resolve, reject) => {\r\n            let xhr = new XMLHttpRequest();\r\n            xhr.open(\"POST\", s3Data.url);\r\n            xhr.timeout = 30000;\r\n            xhr.upload.onprogress = updateProgress;\r\n    \r\n            let postData = new FormData();\r\n            for (let key in s3Data.fields) {\t\t\t\r\n                if (key != 'file') { // in field \"file\" must be blob of file.\r\n                    postData.append(key, s3Data.fields[key]);\r\n                    //console.log('append', key, s3Data.fields[key]);\r\n                }                    \r\n            }\r\n            postData.append(\"file\", file);\r\n    \r\n            xhr.onload = () => {\r\n                // transaction completes successfully.\r\n                setStatus({state: stateComponent.uploaded, msg: ''});\r\n                resolve(xhr.status);\r\n            };  \r\n    \r\n            xhr.onerror = (e: any) => {\r\n                reject('error');\r\n                setShowSpinner(false);\r\n                setButtonCaptionState('Error');                        \r\n                setStatus({state: stateComponent.error, msg: String(e.target.status)});                                                                            \r\n                alert(`Error during file upload (status: ${e.target.statusText})`);\r\n            };  \r\n    \r\n            xhr.ontimeout = () => {\r\n                reject('timeout');\r\n                setShowSpinner(false);\r\n                setButtonCaptionState('Error');                        \r\n                setStatus({state: stateComponent.error, msg: 'Time out'});                                                                            \r\n                alert(`Error during file upload (status: Time out)`);   \r\n            }\r\n                      \r\n            xhr.send(postData);\r\n        });\r\n    }\r\n\r\n\r\n\r\n    const resizerFunc = async (file: Blob): Promise<Blob | undefined> => {\r\n        if (resizer.enabled && resizer.autoResize) {\r\n                        \r\n            if (compressedPhoto) { // if autoUpload = False, it's mean that resized photo in state\r\n                return compressedPhoto;\r\n            }\r\n\r\n            if (file) { // if autoUpload = True, it's mean that resized photo gona be in 'file' parametr\r\n                return file;                      \r\n            }                    \r\n\r\n            setStatus({state: stateComponent.error, msg: ''});\r\n            return undefined;                \r\n        }\r\n\r\n        if (resizer.enabled && !resizer.autoResize) {\r\n            try {                \r\n                onResizeStart && onResizeStart();\r\n                setStatus({state: stateComponent.resizing, msg: ''});                            \r\n                const image = await resizeFile(file);\r\n\r\n                if (image instanceof Blob) {                            \r\n                    setStatus({state: stateComponent.resized, msg: String(humanFileSize(image.size))});  \r\n                    return image                          \r\n                } else {\r\n                    setStatus({state: stateComponent.error, msg: 'Resizing error.'});\r\n                    return undefined;\r\n                }\r\n                          \r\n            } finally {\r\n                onResizeFinish && onResizeFinish();                    \r\n            } \r\n                            \r\n        }\r\n\r\n        if (!resizer.enabled) {\r\n            return file; \r\n        }\r\n\r\n        return undefined;\r\n    }\r\n\r\n\r\n    const startUpload = async (filename: string, file: Blob) => {        \r\n        try {\r\n            filename = filename.replace(/\\s/g, ''); // remove spaces, because there is some problem with restAPI, which return url filename with %20 instead space, after that when we savind data again, %20 will be convert to %2520 (% = %25)\r\n\r\n            setStatus({state: stateComponent.startingUpload, msg: ''});\r\n            setS3DataState(undefined);\r\n\r\n            const signedUrl = await fetchUrlSign(signingUrl, filename);            \r\n            setS3DataState(signedUrl);  \r\n            if (onSignedUrl) {\r\n                onSignedUrl(signedUrl);\r\n            }\r\n\r\n            const fileForUpload = await resizerFunc(file);\r\n            if (fileForUpload) {\r\n                await uploadFile(fileForUpload, signedUrl);  \r\n                return true; \r\n            }\r\n\r\n            return false;\r\n\r\n        } catch(error) {            \r\n            let message;\r\n            if (error instanceof Error) message = error.message;\r\n            else message = String(error);            \r\n            setStatus({state: stateComponent.error, msg: message});\r\n            return false;           \r\n        }\r\n\r\n    }\r\n\r\n    const clearImage = () => {        \r\n        fireOnChange('');\r\n        setImagePhoto(emptyPhoto);        \r\n        setStatus({state: stateComponent.none, msg: ''});\r\n        if (inputFileEl?.current) {\r\n            //@ts-ignore\r\n            inputFileEl.current.value='';\r\n        }         \r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"imageS3UploadContainer\" style={{position: \"relative\"}}>\r\n\r\n            <img id=\"imageS3Upload\" src={imagePhoto} key={imagePhoto} alt=\"\" />\r\n            \r\n            <img style={{cursor: \"pointer\"}}\r\n                id=\"imageDeleteIconS3Upload\"\r\n                src={deleteImage} \r\n                onClick={clearImage}                          \r\n                alt=\"\" \r\n            />\r\n                                        \r\n            {showSpinner && <span className=\"spinner\"></span>} \r\n\r\n            <button \r\n                className=\"button\" \r\n                type=\"button\"\r\n                onClick={()=>{                        \r\n                    setShowSpinner(false);\r\n                    setButtonCaptionState(buttonCaption);\r\n                    //@ts-ignore                        \r\n                    inputFileEl.current.click();\r\n                }}\r\n                data-testid='browseButton'\r\n            >\r\n                {buttonCaptionState}\r\n                \r\n            </button>{' '}\r\n                                    \r\n            <input ref={inputFileEl} type=\"file\" accept=\"image/*\" style={{display: \"none\"}} onChange={onChangeFile} data-testid='inputFile'/>                    \r\n        </div>\r\n    );\r\n\r\n})\r\n\r\nfunction humanFileSize(size: number) {\r\n    const i = Math.floor( Math.log(size) / Math.log(1024) );\r\n    const sSize = ( size / Math.pow(1024, i) ).toFixed(0);\r\n    return `${sSize} ${['B', 'kB', 'MB', 'GB', 'TB'][i]}`;        \r\n};"],"names":["fetchUrlSign","signingUrl","fileName","myHeaders","Headers","append","bodyObject","objectName","fetch","method","headers","body","JSON","stringify","res","ok","Error","status","statusText","json","parse","img","stateComponent","defaultResizingOptions","enabled","autoResize","maxWidth","maxHeight","compressFormat","quality","rotation","ImageS3Upload","forwardRef","ref","autoUpload","emptyPhoto","noImage","serverPhoto","value","onChange","buttonCaption","showSize","id","name","resizer","onStart","onUploaded","onProgress","onFinish","onError","onSignedUrl","onResizeStart","onResizeFinish","inputFileEl","useRef","useState","state","none","msg","setStatus","undefined","imagePhoto","setImagePhoto","compressedPhoto","setCompressedPhoto","buttonCaptionState","setButtonCaptionState","showSpinner","setShowSpinner","s3DataState","setS3DataState","notLoad","setNotLoad","filenameValue","setFilenameValue","useImperativeHandle","uploadFile","finish","uploaded","current","files","length","resizing","startUpload","p","error","useEffect","fields","key","fireOnChange","resized","startingUpload","uploading","intValue","slice","event","persist","target","type","resizeFile","file","Promise","resolve","Resizer","imageFileResizer","uri","Blob","onChangeFile","URL","createObjectURL","image","String","humanFileSize","size","console","log","message","updateProgress","ev","lengthComputable","percentComplete","Math","round","loaded","total","s3Data","reject","xhr","XMLHttpRequest","open","url","timeout","upload","onprogress","postData","FormData","onload","onerror","e","alert","ontimeout","send","resizerFunc","filename","replace","signedUrl","fileForUpload","clearImage","React","className","style","position","src","alt","cursor","deleteImage","onClick","click","accept","display","i","floor","sSize","pow","toFixed"],"mappings":"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"}